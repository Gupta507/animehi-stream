// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id            String          @id @default(cuid())
  name            String?
  email           String? @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userName        String?
  sessions        Session[]
  watchlists      Watchlist[]
  continueWatching ContinueWatching[]
  bookMarks       Bookmark[]
  comments        Comment[]
  commentLike     CommentLike[]
  commentDislike  CommentDislike[]
  replies         ReplyComment[]
  replyLike       LikeReplyComment[]

  accounts        Account[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Watchlist {
    id            String          @id @default(cuid())

  animeId       String
  image         String
  title         String
  episodeNumber Int?
  timeWatched   Int?      @default(0)
  duration      Int?       @default(0)
  episodeId     String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  anilistId     String
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bookmark {
    id            String          @id @default(cuid())

  animeId      String
  image        String
  title        String
  anilistId    String
  createdAt    DateTime   @default(now())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContinueWatching {
   id            String          @id @default(cuid())

  animeId      String
  image        String
  title        String
  createdAt    DateTime    @default(now())
  anilistId    String
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ViewCounter {
   id            String          @id @default(cuid())

  view         Int      @default(0)
  createdAt    DateTime @default(now())
  animeId      String
  title        String
  image        String
  anilistId    String
  latestEpisodeNumber   Int?
}


model Comment {
    id            String          @id @default(cuid())

  comment      String
  createdAt    DateTime @default(now())
  animeId      String
  anilistId    String
  episodeId    String
  updatedAt    DateTime   @updatedAt
  episodeNumber String
  isEdited     Boolean?
  title        String?
  commentLike  CommentLike[]
  commentDislike  CommentDislike[]
  replyComment  ReplyComment[]

  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CommentLike {
    id            String          @id @default(cuid())

  createdAt    DateTime   @default(now())
  commentId    String
  comment      Comment    @relation(fields: [commentId], references: [id], onDelete: Cascade)

  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model CommentDislike {
    id            String          @id @default(cuid())

  createdAt    DateTime   @default(now())
  commentId    String
  comment      Comment    @relation(fields: [commentId], references: [id], onDelete: Cascade)

  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model ReplyComment {
    id            String          @id @default(cuid())

  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime   @updatedAt
  isEdited     Boolean?
  commentId       String
  comment         Comment    @relation(fields: [commentId], references: [id], onDelete: Cascade)
  replyLike   LikeReplyComment[]

  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LikeReplyComment {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  replyId       String
  reply         ReplyComment    @relation(fields: [replyId], references: [id], onDelete: Cascade)

  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, replyId])
}

